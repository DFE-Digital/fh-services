name: Deploy to dev

concurrency: deploy-dev

env:
  # Config
  DOTNET_VERSION: '8.0.x'
  ENTITY_FRAMEWORK_VERSION: '7.*'
  AZURE_WEBAPP_NAME_IDAM_API: s181d01-as-fh-idam-api
  AZURE_WEBAPP_PACKAGE_PATH: '.'
  # Other
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  RESOURCE_GROUP: s181d01-familyhubs
  SQL_SERVER_RESOURCE_NAME: s181d01-as-fh-sql-server
  SQL_SERVER_TEMP_FW_RULE_NAME: github-actions-temp

on:
  workflow_dispatch:

permissions:
  contents: read
  id-token: write

jobs:
  build-and-publish-idam-api:
    name: Build, test & publish service/idam-api
    runs-on: ubuntu-latest
    env:
      WORKING_DIRECTORY: src/service/idam-api/
      STARTUP_PROJECT_PATH: src/FamilyHubs.Idam.Api

    defaults:
      run:
        working-directory: ${{ env.WORKING_DIRECTORY }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Set up dependency caching for faster builds
        uses: actions/cache@v3
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore
      # - name: Test
      #   run: dotnet test --no-build --no-restore --verbosity normal
      - name: Publish
        run: dotnet publish ${{ format('{0}/*.csproj', env.STARTUP_PROJECT_PATH) }} -c Release -o release
      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-idam-api
          path: ${{ format('{0}/release', env.WORKING_DIRECTORY) }}
          if-no-files-found: error

  deploy-idam-api:
    name: Deploy service/idam-api
    runs-on: ubuntu-latest
    environment: development
    needs: [build-and-publish-idam-api]

    env:
      WORKING_DIRECTORY: src/service/idam-api/
      STARTUP_PROJECT_PATH: src/FamilyHubs.Idam.Api
      DATA_PROJECT_PATH: src/FamilyHubs.Idam.Data
    
    steps:
      - uses: actions/checkout@v4

      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-idam-api
          path: release

      - name: App Settings Variable Substitution
        uses: microsoft/variable-substitution@v1
        with:
          # We need to replace release/appsettings, and the appsettings in the src/ folder too, as the src folder
          #Â appsettings is used for the below dotnet ef database update step
          files: ${{ format('release/appsettings.json, {0}/{1}/appsettings.json', env.WORKING_DIRECTORY, env.STARTUP_PROJECT_PATH) }}
        env:
          'APPINSIGHTS_CONNECTION_STRING': '${{ secrets.IDAM_API_APPINSIGHTS_CONNECTION_STRING }}'
          'APPINSIGHTS_INSTRUMENTATIONKEY': '${{ vars.IDAM_API_APPINSIGHTS_INSTRUMENTATIONKEY }}'
          'ConnectionStrings.IdamConnection': '${{ secrets.IDAM_API_CONNECTIONSTRINGS_IDAMCONNECTION }}'
          'Crypto.clientId': '${{ vars.IDAM_API_CRYPTO_CLIENTID }}'
          'Crypto.clientSecret': ${{ format('{0}', secrets.IDAM_API_CRYPTO_CLIENTSECRET) }}
          'Crypto.DbEncryptionIVKey': '${{ secrets.IDAM_API_CRYPTO_DBENCRYPTIONIVKEY }}'
          'Crypto.DbEncryptionIVKeySecretName': '${{ vars.IDAM_API_CRYPTO_DBENCRYPTIONIVKEYSECRETNAME }}'
          'Crypto.DbEncryptionKey': '${{ secrets.IDAM_API_CRYPTO_DBENCRYPTIONKEY }}'
          'Crypto.DbEncryptionKeySecretName': '${{ vars.IDAM_API_CRYPTO_DBENCRYPTIONKEYSECRETNAME }}'
          'Crypto.KeyVaultIdentifier': '${{ vars.IDAM_API_CRYPTO_KEYVAULTIDENTIFIER }}'
          'Crypto.tenantId': '${{ vars.IDAM_API_CRYPTO_TENANTID }}'
          'Crypto.UseKeyVault': ${{ format('{0}', vars.IDAM_API_CRYPTO_USEKEYVAULT) }}
          'EventGridUrl': '${{ vars.IDAM_API_EVENTGRIDURL }}'
          'GovUkOidcConfiguration.BearerTokenSigningKey': '${{ secrets.IDAM_API_GOVUKOIDCCONFIGURATION_BEARERTOKENSIGNINGKEY }}'
          'ServiceDirectoryApiBaseUrl': '${{ vars.IDAM_API_SERVICEDIRECTORYAPIBASEURL }}'
      
      # - name: 'Az CLI login'
      #   uses: azure/login@v1
      #   with:
      #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID_DEVELOPMENT }}
      
      # - name: Whitelist GitHub runner IP
      #   uses: azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       set -eu
      #       agentIP=$(curl -s https://api.ipify.org/)
      #       az sql server firewall-rule create -g ${{ env.RESOURCE_GROUP }} -s ${{ env.SQL_SERVER_RESOURCE_NAME }} -n ${{ env.SQL_SERVER_TEMP_FW_RULE_NAME }} --start-ip-address $agentIP --end-ip-address $agentIP
      #       sleep 300

      # - name: Install Entity Framework
      #   working-directory: ${{ env.WORKING_DIRECTORY }}
      #   run: dotnet tool install --global dotnet-ef --version ${{ env.ENTITY_FRAMEWORK_VERSION }}

      # - name: Apply EF Core database migrations
      #   working-directory: ${{ env.WORKING_DIRECTORY }}
      #   run: dotnet ef database update -c ApplicationDbContext --project ${{ env.DATA_PROJECT_PATH }} --startup-project ${{ env.STARTUP_PROJECT_PATH }}

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME_IDAM_API }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_IDAM_API }}
          package: ./release
      
      # - name: Remove GitHub runner IP from whitelist
      #   if: always()
      #   uses: azure/CLI@v1
      #   with:
      #     inlineScript: |
      #       set -eu
      #       agentIP=$(curl -s https://api.ipify.org/)
      #       az sql server firewall-rule delete -g ${{ env.RESOURCE_GROUP }} -s ${{ env.SQL_SERVER_RESOURCE_NAME }} -n ${{ env.SQL_SERVER_TEMP_FW_RULE_NAME }} --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID_DEVELOPMENT }}
  