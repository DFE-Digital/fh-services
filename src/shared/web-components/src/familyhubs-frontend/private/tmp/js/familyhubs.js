// js components were originally snaffled from https://github.com/alphagov/govuk-design-system/blob/main/src/javascripts/components/
//todo: swap to a components folder?
import { getConsentCookie } from "./components/cookie-functions";
import CookieBanner from './components/cookie-banner';
import CookiesPage from './components/cookies-page';
import initAnalytics from './components/analytics';
import initClarity from './components/clarity';
import { initializeAddAnother } from './components/add-another';
import { initializeAutocompletes } from './components/autocomplete';
import { initializeBackButtons } from './components/back-links';
import { initializeVisibilityToggles } from './components/visibility-toggle';
import { OpenCloseButton } from './components/open-close-button';
//todo: consistency in module/proto/class style
window.FamilyHubsFrontend = window.FamilyHubsFrontend || {};
window.FamilyHubsFrontend.initAll = () => {
    // Initialise cookie banner
    const $cookieBanner = document.querySelector('[data-module="govuk-cookie-banner"]');
    new CookieBanner($cookieBanner).init();
    const userConsent = getConsentCookie();
    initAnalytics(window.GA_MEASUREMENT_ID, userConsent);
    initClarity(window.CLARITY_ID, userConsent);
    //todo: move this into scripts section on cookie page
    // Initialise cookie page
    var $cookiesPage = document.querySelector('[data-module="fh-cookies-page"]');
    new CookiesPage($cookiesPage).init();
    initializeBackButtons();
    initializeVisibilityToggles();
    //todo: ordering between these two?
    initializeAddAnother();
    initializeAutocompletes();
    // initialise open close buttons
    let openCloseButtons = document.querySelectorAll('button[data-open-close-mobile]');
    openCloseButtons === null || openCloseButtons === void 0 ? void 0 : openCloseButtons.forEach((openCloseButton) => {
        new OpenCloseButton(openCloseButton);
    });
};
//todo: do we want to do this...
//document.addEventListener("DOMContentLoaded", function () {
window.GOVUKFrontend.initAll();
window.MOJFrontend.initAll();
window.FamilyHubsFrontend.initAll();

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZhbWlseWh1YnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsb0lBQW9JO0FBRXBJLG9DQUFvQztBQUVwQyxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQW9CL0QsT0FBTyxZQUFZLE1BQU0sNEJBQTRCLENBQUE7QUFDckQsT0FBTyxXQUFXLE1BQU0sMkJBQTJCLENBQUE7QUFDbkQsT0FBTyxhQUFhLE1BQU0sd0JBQXdCLENBQUM7QUFDbkQsT0FBTyxXQUFXLE1BQU0sc0JBQXNCLENBQUM7QUFDL0MsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDcEUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDaEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWpFLCtDQUErQztBQUUvQyxNQUFNLENBQUMsa0JBQWtCLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixJQUFJLEVBQUUsQ0FBQztBQUM1RCxNQUFNLENBQUMsa0JBQWtCLENBQUMsT0FBTyxHQUFHLEdBQUcsRUFBRTtJQUVyQywyQkFBMkI7SUFDM0IsTUFBTSxhQUFhLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxxQ0FBcUMsQ0FBdUIsQ0FBQztJQUMxRyxJQUFJLFlBQVksQ0FBQyxhQUFhLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUV2QyxNQUFNLFdBQVcsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDO0lBQ3ZDLGFBQWEsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDckQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFFNUMscURBQXFEO0lBQ3JELHlCQUF5QjtJQUN6QixJQUFJLFlBQVksR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLGlDQUFpQyxDQUFDLENBQUM7SUFDN0UsSUFBSSxXQUFXLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7SUFFckMscUJBQXFCLEVBQUUsQ0FBQztJQUN4QiwyQkFBMkIsRUFBRSxDQUFDO0lBQzlCLG1DQUFtQztJQUNuQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3ZCLHVCQUF1QixFQUFFLENBQUM7SUFFMUIsZ0NBQWdDO0lBQ2hDLElBQUksZ0JBQWdCLEdBQWtDLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO0lBQ2xILGdCQUFnQixhQUFoQixnQkFBZ0IsdUJBQWhCLGdCQUFnQixDQUFFLE9BQU8sQ0FBQyxDQUFDLGVBQWUsRUFBRSxFQUFFO1FBQzFDLElBQUksZUFBZSxDQUFDLGVBQWUsQ0FBQyxDQUFDO0lBQ3pDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQyxDQUFDO0FBRUYsZ0NBQWdDO0FBQ2hDLDZEQUE2RDtBQUU3RCxNQUFNLENBQUMsYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDO0FBQy9CLE1BQU0sQ0FBQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUM7QUFDN0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxDQUFDIiwiZmlsZSI6ImZhbWlseWh1YnMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBqcyBjb21wb25lbnRzIHdlcmUgb3JpZ2luYWxseSBzbmFmZmxlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9hbHBoYWdvdi9nb3Z1ay1kZXNpZ24tc3lzdGVtL2Jsb2IvbWFpbi9zcmMvamF2YXNjcmlwdHMvY29tcG9uZW50cy9cblxuLy90b2RvOiBzd2FwIHRvIGEgY29tcG9uZW50cyBmb2xkZXI/XG5cbmltcG9ydCB7Z2V0Q29uc2VudENvb2tpZX0gZnJvbSBcIi4vY29tcG9uZW50cy9jb29raWUtZnVuY3Rpb25zXCI7XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICAgICAgR0RTX0NPTlNFTlRfQ09PS0lFX1ZFUlNJT046IG51bWJlcjtcbiAgICAgICAgR0FfTUVBU1VSRU1FTlRfSUQ6IHN0cmluZztcbiAgICAgICAgR0FfQ09OVEFJTkVSX0lEOiBzdHJpbmc7XG4gICAgICAgIEdBX0NPT0tJRV9OQU1FOiBzdHJpbmc7XG4gICAgICAgIENMQVJJVFlfSUQ6IHN0cmluZztcbiAgICAgICAgZGF0YUxheWVyOiBhbnlbXTtcbiAgICAgICAgRmFtaWx5SHVic0Zyb250ZW5kOiBhbnk7XG4gICAgICAgIEdPVlVLRnJvbnRlbmQ6IHtcbiAgICAgICAgICAgIGluaXRBbGw6ICgpID0+IHZvaWQ7XG4gICAgICAgIH1cbiAgICAgICAgTU9KRnJvbnRlbmQ6IHtcbiAgICAgICAgICAgIGluaXRBbGw6ICgpID0+IHZvaWQ7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmltcG9ydCBDb29raWVCYW5uZXIgZnJvbSAnLi9jb21wb25lbnRzL2Nvb2tpZS1iYW5uZXInXG5pbXBvcnQgQ29va2llc1BhZ2UgZnJvbSAnLi9jb21wb25lbnRzL2Nvb2tpZXMtcGFnZSdcbmltcG9ydCBpbml0QW5hbHl0aWNzIGZyb20gJy4vY29tcG9uZW50cy9hbmFseXRpY3MnO1xuaW1wb3J0IGluaXRDbGFyaXR5IGZyb20gJy4vY29tcG9uZW50cy9jbGFyaXR5JztcbmltcG9ydCB7IGluaXRpYWxpemVBZGRBbm90aGVyIH0gZnJvbSAnLi9jb21wb25lbnRzL2FkZC1hbm90aGVyJztcbmltcG9ydCB7IGluaXRpYWxpemVBdXRvY29tcGxldGVzIH0gZnJvbSAnLi9jb21wb25lbnRzL2F1dG9jb21wbGV0ZSc7XG5pbXBvcnQgeyBpbml0aWFsaXplQmFja0J1dHRvbnMgfSBmcm9tICcuL2NvbXBvbmVudHMvYmFjay1saW5rcyc7XG5pbXBvcnQgeyBpbml0aWFsaXplVmlzaWJpbGl0eVRvZ2dsZXMgfSBmcm9tICcuL2NvbXBvbmVudHMvdmlzaWJpbGl0eS10b2dnbGUnO1xuaW1wb3J0IHsgT3BlbkNsb3NlQnV0dG9uIH0gZnJvbSAnLi9jb21wb25lbnRzL29wZW4tY2xvc2UtYnV0dG9uJztcblxuLy90b2RvOiBjb25zaXN0ZW5jeSBpbiBtb2R1bGUvcHJvdG8vY2xhc3Mgc3R5bGVcblxud2luZG93LkZhbWlseUh1YnNGcm9udGVuZCA9IHdpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQgfHwge307XG53aW5kb3cuRmFtaWx5SHVic0Zyb250ZW5kLmluaXRBbGwgPSAoKSA9PiB7XG5cbiAgICAvLyBJbml0aWFsaXNlIGNvb2tpZSBiYW5uZXJcbiAgICBjb25zdCAkY29va2llQmFubmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtbW9kdWxlPVwiZ292dWstY29va2llLWJhbm5lclwiXScpIGFzIEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgICBuZXcgQ29va2llQmFubmVyKCRjb29raWVCYW5uZXIpLmluaXQoKTtcblxuICAgIGNvbnN0IHVzZXJDb25zZW50ID0gZ2V0Q29uc2VudENvb2tpZSgpO1xuICAgIGluaXRBbmFseXRpY3Mod2luZG93LkdBX01FQVNVUkVNRU5UX0lELCB1c2VyQ29uc2VudCk7XG4gICAgaW5pdENsYXJpdHkod2luZG93LkNMQVJJVFlfSUQsIHVzZXJDb25zZW50KTtcblxuICAgIC8vdG9kbzogbW92ZSB0aGlzIGludG8gc2NyaXB0cyBzZWN0aW9uIG9uIGNvb2tpZSBwYWdlXG4gICAgLy8gSW5pdGlhbGlzZSBjb29raWUgcGFnZVxuICAgIHZhciAkY29va2llc1BhZ2UgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1tb2R1bGU9XCJmaC1jb29raWVzLXBhZ2VcIl0nKTtcbiAgICBuZXcgQ29va2llc1BhZ2UoJGNvb2tpZXNQYWdlKS5pbml0KCk7XG5cbiAgICBpbml0aWFsaXplQmFja0J1dHRvbnMoKTtcbiAgICBpbml0aWFsaXplVmlzaWJpbGl0eVRvZ2dsZXMoKTtcbiAgICAvL3RvZG86IG9yZGVyaW5nIGJldHdlZW4gdGhlc2UgdHdvP1xuICAgIGluaXRpYWxpemVBZGRBbm90aGVyKCk7XG4gICAgaW5pdGlhbGl6ZUF1dG9jb21wbGV0ZXMoKTtcblxuICAgIC8vIGluaXRpYWxpc2Ugb3BlbiBjbG9zZSBidXR0b25zXG4gICAgbGV0IG9wZW5DbG9zZUJ1dHRvbnM6IE5vZGVMaXN0T2Y8SFRNTEJ1dHRvbkVsZW1lbnQ+ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnYnV0dG9uW2RhdGEtb3Blbi1jbG9zZS1tb2JpbGVdJyk7XG4gICAgb3BlbkNsb3NlQnV0dG9ucz8uZm9yRWFjaCgob3BlbkNsb3NlQnV0dG9uKSA9PiB7XG4gICAgICAgIG5ldyBPcGVuQ2xvc2VCdXR0b24ob3BlbkNsb3NlQnV0dG9uKTtcbiAgICB9KTtcbn07XG5cbi8vdG9kbzogZG8gd2Ugd2FudCB0byBkbyB0aGlzLi4uXG4vL2RvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsIGZ1bmN0aW9uICgpIHtcblxud2luZG93LkdPVlVLRnJvbnRlbmQuaW5pdEFsbCgpO1xud2luZG93Lk1PSkZyb250ZW5kLmluaXRBbGwoKTtcbndpbmRvdy5GYW1pbHlIdWJzRnJvbnRlbmQuaW5pdEFsbCgpO1xuIl19
