// <auto-generated />
using FamilyHubs.Mock_Hdsa.Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FamilyHubs.Mock_Hdsa.Api.Migrations
{
    [DbContext(typeof(MockDbContext))]
    [Migration("20240726125015_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FamilyHubs.Mock_Hdsa.Api.MockResponse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("OperationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryParams")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ScenarioName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MockResponses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OperationName = "getAPIMetaInformation",
                            ResponseBody = "{\r\n  \"version\": \"3.0\",\r\n  \"profile\": \"https://todo/put/our/profile/uri/here\",\r\n  \"openapi_url\": \"https://raw.githubusercontent.com/openreferral/specification/3.0/schema/openapi.json\"\r\n}\r\n",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 2,
                            OperationName = "getFullyNestedServiceById",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 3,
                            OperationName = "getPaginatedListOfServices",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 4,
                            OperationName = "getTaxonomyById",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 5,
                            OperationName = "getPaginatedListOfTaxonomies",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 6,
                            OperationName = "getPaginatedListOfTaxonomyTerms",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 7,
                            OperationName = "getTaxonomyTermById",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 8,
                            OperationName = "getOrganizationById",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 9,
                            OperationName = "getPaginatedListOfOrganizations",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 10,
                            OperationName = "getServiceAtLocationWithNestedDataById",
                            ResponseBody = "",
                            StatusCode = 200
                        },
                        new
                        {
                            Id = 11,
                            OperationName = "getPaginatedListOfServiceAtLocation",
                            ResponseBody = "",
                            StatusCode = 200
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
