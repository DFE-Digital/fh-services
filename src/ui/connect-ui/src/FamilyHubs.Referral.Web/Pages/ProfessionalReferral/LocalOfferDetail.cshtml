@page
@model LocalOfferDetailModel
@{
    ViewData["Title"] = Model.LocalOffer.Name;
}

@section Back {
    @if (!string.IsNullOrEmpty(Model.ReturnUrl) && Model.ReturnUrl.Contains("Safeguarding"))
    {
        @* we _could_ store the postcode (and current page) through the journey and take them back to the correct results page *@
        @* <a asp-page="/ProfessionalReferral/LocalOfferResults" class="govuk-back-link" data-testid="back-button"
           asp-route-postcode="" asp-route-currentPage="">Back</a>*@

        @* as we don't, send them back to the search page instead *@
        <a asp-page="/ProfessionalReferral/Search" class="govuk-back-link" data-testid="back-button">Back</a>
    }
    else
    {
        <a href="@Model.ReturnUrl" class="govuk-back-link" data-testid="back-button">Back</a>
    }
}

<div class="govuk-grid-row">
    @*todo: proto has heading in full width div, but don't think that's correct!? *@
    <div class="govuk-grid-column-two-thirds">
        <h1 class="govuk-heading-l govuk-!-margin-bottom-6" data-testid="service-name">@Model.LocalOffer.Name</h1>
        <p class="govuk-!-margin-bottom-6" data-testid="service-summary">
            @Model.LocalOffer.Summary
        </p>
        <h2 class="govuk-heading-m">Service details</h2>

        @* todo: update value display *@
        @* todo: add comment to story about different responsiveness (mobile) - proto doesn't seem to be responding correctly *@
        @* todo: add comment to story that where the proto and story don't mention service property permutations, matched the display from the check details page in Manage*@

        <summary-list class="govuk-!-margin-bottom-9">
            <summary-row key="Support it offers" show-empty>
                    @if (Model.LocalOffer.Taxonomies.Any())
                    {
                        <unordered-list items="@Model.LocalOffer.Taxonomies.Select(t => t.Name).Order()">
                        </unordered-list>
                    }
            </summary-row>
            
            <summary-row key="Does support relate to children or young people?" show-empty>
                @{
                    var eligibility = Model.LocalOffer.Eligibilities.FirstOrDefault();
                    if (eligibility == null)
                    {
                        <text>No</text>
                    }
                    else
                    {
                        <text>Yes, @AgeToString(eligibility.MinimumAge) years old to @AgeToString(eligibility.MaximumAge) years old</text>
                    }
                }
            </summary-row>
            
            <summary-row key="Languages" show-empty>
                @if (Model.LocalOffer.Languages.Any())
                {
                    <unordered-list items="@Model.LocalOffer.Languages.Select(t=> t.Name).Order()">
                    </unordered-list>
                }
            </summary-row>

            <summary-row key="Cost" show-empty>
                @if (Model.LocalOffer?.CostOptions?.Count > 0)
                {
                    <td class="govuk-table__cell" data-testid="cost-value">
                        Yes, it costs money to use. @Model.LocalOffer?.CostOptions?.FirstOrDefault()?.AmountDescription
                    </td>
                }
                else
                {
                    <td class="govuk-table__cell" data-testid="cost-value">Free</td>
                }
            </summary-row>

            <summary-row key="How this service is provided" show-empty>
                @if (Model.LocalOffer.ServiceDeliveries.Any())
                {
                    @* todo: display name *@
                    @string.Join(", ", Model.LocalOffer.ServiceDeliveries.Select(s => s.Name).Order())
                    //@Model.GetDeliveryMethodsAsString(Model.LocalOffer?.ServiceDeliveries)
                }
            </summary-row>

        </summary-list>

        @*         <table class="govuk-table">
            <thead class="govuk-table__head"></thead>
            <tbody class="govuk-table__body">
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">Support it offers</th>
                <td class="govuk-table__cell">
                    @foreach (var serviceTaxonomy in Model.LocalOffer.Taxonomies)
                    {
                        @serviceTaxonomy.Name
                    }
                </td>
            </tr>
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">Cost</th>
                @if (Model.LocalOffer?.CostOptions?.Count > 0)
                {
                    <td class="govuk-table__cell" data-testid="cost-value">
                        Yes, it costs money to use. @Model.LocalOffer?.CostOptions?.FirstOrDefault()?.AmountDescription
                    </td>
                }
                else
                {
                    <td class="govuk-table__cell" data-testid="cost-value">Free</td>
                }

            </tr>
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">Delivery method</th>
                <td class="govuk-table__cell" data-testid="delivery-value">
                    @if (Model.LocalOffer?.ServiceDeliveries != null && Model.LocalOffer?.ServiceDeliveries?.Count > 0)
                    {
                        @Model.GetDeliveryMethodsAsString(Model.LocalOffer?.ServiceDeliveries)
                    }
                </td>
            </tr>
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">For children and young people</th>
                <td class="govuk-table__cell" data-testid="eligibilities-value">
                    @{
                        var eligibility = Model.LocalOffer?.Eligibilities?.FirstOrDefault();
                        if (eligibility != null)
                        {
                            // todo: magic number
                            <text>@eligibility.MinimumAge to @(eligibility.MaximumAge == 127 ? "25+" : eligibility.MaximumAge) years old</text>
                        }
                    }
                </td>
            </tr>
            <tr class="govuk-table__row">
                <th scope="row" class="govuk-table__header">Languages</th>
                <td class="govuk-table__cell" data-testid="language-value">
                    @if (Model.LocalOffer?.Languages is { Count: > 0 })
                    {
                        @Model.GetLanguagesAsString(Model.LocalOffer.Languages)
                    }
                </td>
            </tr>
            @{
                var serviceAvailability = Model.LocalOffer!.GetServiceAvailability();
                if (serviceAvailability.Any())
                {
                    <tr class="govuk-table__row">
                        <th scope="row" class="govuk-table__header">Service availability</th>
                        <td class="govuk-table__cell" data-testid="service-availability-value">
                            @Html.Raw(string.Join("<br>", serviceAvailability))
                        </td>
                    </tr>
                }
            }
            </tbody>
        </table> *@

        <h2 class="govuk-heading-m">More details</h2>
        <p data-testid="description-value">@Model.LocalOffer?.Description</p>
        <h2 class="govuk-heading-m">Connect a family to this service</h2>

        <dl class="govuk-summary-list">
            <!-- Contact details -->
            <!-- Phone-->
            @if (!string.IsNullOrEmpty(Model.Phone))
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Phone
                    </dt>
                    <dd class="govuk-summary-list__value" data-testid="detailsphone">
                        <a href="tel:@Model.Phone">@Model.Phone</a>
                    </dd>
                </div>
            }

            <!--Email-->
            @if (!string.IsNullOrEmpty(Model.Email))
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Email
                    </dt>
                    <dd class="govuk-summary-list__value" data-testid="detailsemail">
                        <a href="mailto:@Model.Email">
                            @Model.Email
                        </a>
                    </dd>
                </div>
            }

            <!--Address-->
            @if (Model.Location != null)
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Address
                    </dt>
                    <dd class="govuk-summary-list__value" data-testid="detailsaddress">
                        @Html.Raw(string.Join("<br>", Model.Location.GetAddress()))
                    </dd>
                </div>
            }

            <!--Website-->
            @if (!string.IsNullOrEmpty(Model.Website))
            {
                <div class="govuk-summary-list__row">
                    <dt class="govuk-summary-list__key">
                        Website
                    </dt>
                    <dd class="govuk-summary-list__value" data-testid="detailswebsite">
                        <a href="@Model.Website">
                            @Model.Website
                        </a>
                    </dd>
                </div>
            }
        </dl>

        @if (Model.ShowConnectionRequestButton)
        {
            <h2 class="govuk-heading-m">Request a connection</h2>

            <p>Request a connection between the people who need support and this service. The service will accept or decline the request.</p>

            <a asp-page="/ProfessionalReferral/Safeguarding" role="button" draggable="false" class="govuk-button" data-module="govuk-button"
               asp-route-serviceId="@Model.ServiceId">Request a connection</a>
        }
    </div>
</div>

@functions {
    private static string AgeToString(int age)
    {
        return age == 127 ? "25+" : age.ToString();
    }
}
