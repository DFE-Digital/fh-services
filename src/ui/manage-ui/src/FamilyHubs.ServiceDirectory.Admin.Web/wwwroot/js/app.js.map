{"version":3,"sources":["tmp/js/app.js"],"names":["fhgov","this","init","restoreConditionalInputs","enhanceAccessibleAutocomplete","element","document","querySelector","HTMLElement","click","modelLaOrganisationName","getElementById","accessibleAutocomplete","enhanceSelectElement","defaultValue","value","name","selectElement","modelVcsOrganisationName","setupLanguageAutocompleteWhenAddAnother","languageSelects","querySelectorAll","MutationObserver","mutationsList","observer","childListMutation","some","mutation","type","addedNodes","length","attributesMutation","attributeName","targetElement","target","tagName","toLowerCase","getAttribute","forEach","select","input","id","replace","addGovUkClasses","classList","contains","observe","childList","subtree","attributes","errorState","add","handleUpdatingLanguageAddAnother","addRemoveNodes","Array","from","concat","removedNodes","node","nodeName","item","index","label","textContent","button","container","window","addEventListener"],"mappings":"AAAA,SAASA,QACLC,KAAKC,KAAO,WACRC,IACAC,GACR,EACI,IAAID,EAA2B,WAC3B,MAAME,EAAUC,SAASC,cAAc,6BACnCF,aAAmBG,aACnBH,EAAQI,OAEpB,EAEQL,EAAgC,WAEhC,MAAMM,EAA0BJ,SAASK,eAAe,2BACpDD,GACAE,uBAAuBC,qBAAqB,CACxCC,aAAcJ,EAAwBK,MACtCC,KAAM,qBACNC,cAAeX,SAASC,cAAc,yBAI9C,MAAMW,EAA2BZ,SAASK,eAAe,4BACrDO,GACAN,uBAAuBC,qBAAqB,CACxCC,aAAcI,EAAyBH,MACvCC,KAAM,sBACNC,cAAeX,SAASC,cAAc,yBAGtD,CACA,CAKA,SAASY,wCAAwCd,GAC7C,KAAMA,aAAmBG,aACrB,OAEJ,MAAMY,EAAkBf,EAAQgB,iBAAiB,2BAkB7B,IAAIC,kBAAiB,CAACC,EAAeC,KACrD,MAAMC,EAAoBF,EAAcG,MAAKC,GAA8B,cAAlBA,EAASC,MAAwBD,EAASE,WAAWC,OAAS,IACjHC,EAAqBR,EAAcG,MAAKC,IAC1C,GAAsB,eAAlBA,EAASC,MAAoD,UAA3BD,EAASK,cAA2B,CACtE,MAAMC,EAAgBN,EAASO,OAC/B,MAA+C,UAAxCD,EAAcE,QAAQC,eAAoE,SAAvCH,EAAcI,aAAa,OACrG,CACY,OAAO,CAAK,KAQZZ,GAAqBM,IAErBX,EAAgBkB,SAAQ,SAAUC,GAC9B,MAAMC,EAAQlC,SAASK,eAAe4B,EAAOE,GAAGC,QAAQ,UAAW,KAEnE,IAAKF,EACD,OAGJG,gBAAgBH,EADGD,EAAOK,UAAUC,SAAS,uBAE7D,GACA,IAEgBC,QAAQzC,EAAS,CAAE0C,WAAW,EAAMC,SAAS,EAAMC,YAAY,IAC3E7B,EAAgBkB,SAAQ,SAAUC,GAC9B3B,uBAAuBC,qBAAqB,CACxCG,KAAM,eACNF,aAAc,GACdG,cAAesB,GAE3B,GACA,CACA,SAASI,gBAAgBH,EAAOU,GACvBV,EAAMI,UAAUC,SAAS,gBAC1BL,EAAMI,UAAUO,IAAI,eAEpBD,IAAeV,EAAMI,UAAUC,SAAS,uBACxCL,EAAMI,UAAUO,IAAI,qBAE5B,CAQA,SAASC,mCAoBL,MAAM5B,EAAW,IAAIF,kBAAiB,CAACC,EAAeC,KAClD,IAAK,MAAMG,KAAYJ,EAAe,CAClC,MAAM8B,EAAiBC,MAAMC,KAAK5B,EAASE,YAAY2B,OAAOF,MAAMC,KAAK5B,EAAS8B,eAC5D,cAAlB9B,EAASC,MAAyByB,EAAe3B,MAAKgC,GAA0B,aAAlBA,EAAKC,aAZ7DrD,SAASe,iBAAiB,yBAClCiB,SAAQ,CAACsB,EAAMC,KACjB,MAAMC,EAAQF,EAAKrD,cAAc,SAC7BuD,IACAA,EAAMC,YAAc,kBAAmBF,EAAQ,IAC/D,IAdsBvD,SAASe,iBAAiB,yBAClCiB,SAAQ,CAACsB,EAAMC,KACjB,MAAMG,EAASJ,EAAKrD,cAAc,kCAC9ByD,IACAA,EAAOD,YAAc,mBAAoBF,EAAQ,IACjE,IAoBA,KAEUI,EAAY3D,SAASK,eAAe,qBACtCsD,GACAzC,EAASsB,QAAQmB,EAAW,CAAElB,WAAW,EAAMC,SAAS,GAEhE,CA/GAkB,OAAOlE,MAAQ,IAAIA,MACnBM,SAAS6D,iBAAiB,oBAAoB,WAC1CD,OAAOlE,MAAME,MACjB,IAiHAiB,wCAAwC,MACxCiC","file":"app.js","sourcesContent":["function fhgov() {\n    this.init = function () {\n        restoreConditionalInputs();\n        enhanceAccessibleAutocomplete();\n    };\n    let restoreConditionalInputs = function () {\n        const element = document.querySelector(\"[data-conditional-active]\");\n        if (element instanceof HTMLElement) {\n            element.click();\n        }\n    };\n    //todo: replace these with the new full page autocomplete component\n    let enhanceAccessibleAutocomplete = function () {\n        //WhichLocalAuthority.cshtml && AddOrganisationWhichLocalAuthority.cshtml\n        const modelLaOrganisationName = document.getElementById('modelLaOrganisationName');\n        if (modelLaOrganisationName) {\n            accessibleAutocomplete.enhanceSelectElement({\n                defaultValue: modelLaOrganisationName.value,\n                name: 'LaOrganisationName',\n                selectElement: document.querySelector('#LaOrganisationName')\n            });\n        }\n        //WhichVcsOrganisation.cshtml\n        const modelVcsOrganisationName = document.getElementById('modelVcsOrganisationName');\n        if (modelVcsOrganisationName) {\n            accessibleAutocomplete.enhanceSelectElement({\n                defaultValue: modelVcsOrganisationName.value,\n                name: 'VcsOrganisationName',\n                selectElement: document.querySelector('#VcsOrganisationName')\n            });\n        }\n    };\n}\nwindow.fhgov = new fhgov();\ndocument.addEventListener('DOMContentLoaded', function () {\n    window.fhgov.init();\n});\nfunction setupLanguageAutocompleteWhenAddAnother(element) {\n    if (!(element instanceof HTMLElement)) {\n        return;\n    }\n    const languageSelects = element.querySelectorAll(\"select[id^='language-']\");\n    /*    console.log('enhancing ' + languageSelects.length + ' language selects');*/\n    // work around accessible-autocomplete not handling errors or using standard govuk styling classes\n    // there's a discussion about handling errors here...\n    // https://github.com/alphagov/accessible-autocomplete/issues/428\n    // but we've had to implement our own (hacky) solution by using MutationObserver\n    // and adding extra classes (with custom css) to the input element.\n    // we are observing the DOM for changes because enhanceSelectElement() ultimately\n    // calls render in Peact, which schedules an update to the DOM, rather than immediately updating the DOM.\n    // (if we forked the accessible-autocomplete component, we could use componentDidMount or useEffect instead).\n    // we also observe any changes to the class attribute of the text input elements,\n    // as any changes we make to the input element's class attribute will be overwritten by the component (on focus etc.).\n    // I was going to either package up this code into an exported function to ease reuse and maintanence,\n    // or fork the accessible-autocomplete preact component,\n    // but someone is adding official support today (2024-01-12) so we should be able to remove this soon!\n    // https://github.com/alphagov/accessible-autocomplete/pull/602\n    //todo: fix aria-describedBy on the input too\n    // see https://github.com/alphagov/accessible-autocomplete/issues/589\n    const domObserver = new MutationObserver((mutationsList, observer) => {\n        const childListMutation = mutationsList.some(mutation => mutation.type === 'childList' && mutation.addedNodes.length > 0);\n        const attributesMutation = mutationsList.some(mutation => {\n            if (mutation.type === 'attributes' && mutation.attributeName === 'class') {\n                const targetElement = mutation.target;\n                return targetElement.tagName.toLowerCase() === 'input' && targetElement.getAttribute('type') === 'text';\n            }\n            return false;\n        });\n        //if (childListMutation) {\n        //    console.log('childListMutation');\n        //}\n        //if (attributesMutation) {\n        //    console.log('attributesMutation');\n        //}\n        if (childListMutation || attributesMutation) {\n            /*todo: create list of input ids outside of observer? */\n            languageSelects.forEach(function (select) {\n                const input = document.getElementById(select.id.replace('-select', ''));\n                // input should never be null now we're observing the DOM for changes, but we check it for extra safety\n                if (!input) {\n                    return;\n                }\n                const errorState = select.classList.contains('govuk-select--error');\n                addGovUkClasses(input, errorState);\n            });\n        }\n    });\n    domObserver.observe(element, { childList: true, subtree: true, attributes: true });\n    languageSelects.forEach(function (select) {\n        accessibleAutocomplete.enhanceSelectElement({\n            name: 'languageName',\n            defaultValue: '',\n            selectElement: select\n        });\n    });\n}\nfunction addGovUkClasses(input, errorState) {\n    if (!input.classList.contains('govuk-input')) {\n        input.classList.add('govuk-input');\n    }\n    if (errorState && !input.classList.contains('govuk-input--error')) {\n        input.classList.add('govuk-input--error');\n    }\n}\n/**\n * This function is used to update the \"Remove\" button text in the \"Add another\" component\n * and update the label text for each item in the \"Add another\" component when adding a new language item to the DOM.\n *\n * NOTE: Adding of DOM elements is done in the familyhubs-frontend FamilyHubsFrontend.AddAnother.prototype list.\n * Doing this UI update here as it makes sense being that it's only for the language page.\n */\nfunction handleUpdatingLanguageAddAnother() {\n    function updateAllRemoveButtonText() {\n        const items = document.querySelectorAll('.fh-add-another__item');\n        items.forEach((item, index) => {\n            const button = item.querySelector('.fh-add-another__remove-button');\n            if (button) {\n                button.textContent = `Remove language ${(index + 1)}`;\n            }\n        });\n    }\n    function updateAllLanguageLabelText() {\n        const items = document.querySelectorAll('.fh-add-another__item');\n        items.forEach((item, index) => {\n            const label = item.querySelector('label');\n            if (label) {\n                label.textContent = `Enter language ${(index + 1)}`;\n            }\n        });\n    }\n    // Observe DOM changes to react to new items being added/removed\n    const observer = new MutationObserver((mutationsList, observer) => {\n        for (const mutation of mutationsList) {\n            const addRemoveNodes = Array.from(mutation.addedNodes).concat(Array.from(mutation.removedNodes));\n            if (mutation.type === 'childList' && (addRemoveNodes.some(node => node.nodeName === 'FIELDSET'))) {\n                updateAllLanguageLabelText();\n                updateAllRemoveButtonText();\n            }\n        }\n    });\n    const container = document.getElementById('fh-add-another-id');\n    if (container) {\n        observer.observe(container, { childList: true, subtree: true });\n    }\n}\n//todo: this is a hack - we want setupLanguageAutocompleteWhenAddAnother to be in the generated js file.\n// if we export it, it includes the export keyword in the generated js file\n// (but we use export in the other ts files, without the js containing export!)\n// so as a workaround we call it where it no-ops\nsetupLanguageAutocompleteWhenAddAnother(null);\nhandleUpdatingLanguageAddAnother();\nexport {};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n"]}