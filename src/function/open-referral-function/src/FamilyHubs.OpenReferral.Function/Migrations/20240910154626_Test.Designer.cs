// <auto-generated />
using System;
using FamilyHubs.OpenReferral.Function.Repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FamilyHubs.OpenReferral.Function.Migrations
{
    [DbContext(typeof(FunctionDbContext))]
    [Migration("20240910154626_Test")]
    partial class Test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Accessibility", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "details");

                    b.Property<Guid?>("LocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "location_id");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("LocationOrId");

                    b.ToTable("Accessibility", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "accessibility");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "address_1");

                    b.Property<string>("Address2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "address_2");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "address_type");

                    b.Property<string>("Attention")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "attention");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "country");

                    b.Property<Guid?>("LocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "location_id");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "postal_code");

                    b.Property<string>("Region")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "region");

                    b.Property<string>("StateProvince")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "state_province");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("LocationOrId");

                    b.ToTable("Address", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "addresses");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Attribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CostOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("FundingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LinkEntity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "link_entity");

                    b.Property<Guid>("LinkId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "link_id");

                    b.Property<string>("LinkType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "link_type");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MetaTableDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationIdentifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RequiredDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceAtLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TaxonomyTermId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "taxonomy_term_id");

                    b.Property<string>("Value")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AccessibilityId");

                    b.HasIndex("AddressId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CostOptionId");

                    b.HasIndex("FundingId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MetaTableDescriptionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationIdentifierId");

                    b.HasIndex("PhoneId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RequiredDocumentId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("ServiceAreaId");

                    b.HasIndex("ServiceAtLocationId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxonomyTermId");

                    b.ToTable("Attribute", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "attributes");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Department")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "department");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "location_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "organization_id");

                    b.Property<Guid?>("ServiceAtLocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_at_location_id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "title");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("LocationId");

                    b.HasIndex("OrganizationOrId");

                    b.HasIndex("ServiceAtLocationOrId");

                    b.HasIndex("ServiceOrId");

                    b.ToTable("Contact", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "contacts");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.CostOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "amount");

                    b.Property<string>("AmountDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "amount_description");

                    b.Property<string>("Currency")
                        .HasColumnType("nchar(3)")
                        .HasAnnotation("Relational:JsonPropertyName", "currency");

                    b.Property<string>("Option")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "option");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "valid_to");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ServiceOrId");

                    b.ToTable("CostOption", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "cost_options");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Funding", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "organization_id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "source");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("OrganizationOrId");

                    b.HasIndex("ServiceOrId");

                    b.ToTable("Funding", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "funding");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<Guid?>("LocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "location_id");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "note");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("PhoneOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "phone_id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("LocationOrId");

                    b.HasIndex("PhoneOrId");

                    b.HasIndex("ServiceOrId");

                    b.ToTable("Language", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "languages");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternateName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "alternate_name");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("ExternalIdentifier")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "external_identifier");

                    b.Property<string>("ExternalIdentifierType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "external_identifier_type");

                    b.Property<decimal?>("Latitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "latitude");

                    b.Property<string>("LocationType")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "location_type");

                    b.Property<decimal?>("Longitude")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasAnnotation("Relational:JsonPropertyName", "longitude");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "organization_id");

                    b.Property<string>("Transportation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "transportation");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("OrganizationOrId");

                    b.ToTable("Location", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "location");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.MetaTableDescription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CharacterSet")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "character_set");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "language");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("MetaTableDescription", "deds");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Metadata", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccessibilityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AddressId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AttributeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CostOptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FieldName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "field_name");

                    b.Property<Guid?>("FundingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("LastActionDate")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "last_action_date");

                    b.Property<string>("LastActionType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "last_action_type");

                    b.Property<Guid?>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MetaTableDescriptionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrganizationIdentifierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PhoneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PreviousValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "previous_value");

                    b.Property<Guid?>("ProgramId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReplacementValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "replacement_value");

                    b.Property<Guid?>("RequiredDocumentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResourceId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "resource_id");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "resource_type");

                    b.Property<Guid?>("ScheduleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceAreaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceAtLocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaxonomyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TaxonomyTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "updated_by");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("AccessibilityId");

                    b.HasIndex("AddressId");

                    b.HasIndex("AttributeId");

                    b.HasIndex("ContactId");

                    b.HasIndex("CostOptionId");

                    b.HasIndex("FundingId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MetaTableDescriptionId");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("OrganizationIdentifierId");

                    b.HasIndex("PhoneId");

                    b.HasIndex("ProgramId");

                    b.HasIndex("RequiredDocumentId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("ServiceAreaId");

                    b.HasIndex("ServiceAtLocationId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("TaxonomyId");

                    b.HasIndex("TaxonomyTermId");

                    b.ToTable("Metadata", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternateName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "alternate_name");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("LegalStatus")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "legal_status");

                    b.Property<string>("Logo")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "logo");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("ParentOrganizationId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_organization_id");

                    b.Property<string>("Uri")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "uri");

                    b.Property<string>("Website")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "website");

                    b.Property<short>("YearIncorporated")
                        .HasColumnType("smallint")
                        .HasAnnotation("Relational:JsonPropertyName", "year_incorporated");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ParentOrganizationId");

                    b.ToTable("Organization", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "organization");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.OrganizationIdentifier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Identifier")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "identifier");

                    b.Property<string>("IdentifierScheme")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "identifier_scheme");

                    b.Property<string>("IdentifierType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "identifier_type");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "organization_id");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("OrganizationOrId");

                    b.ToTable("OrganizationIdentifier", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "organization_identifiers");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "contact_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<short?>("Extension")
                        .HasColumnType("smallint")
                        .HasAnnotation("Relational:JsonPropertyName", "extension");

                    b.Property<Guid?>("LocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "location_id");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "number");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "organization_id");

                    b.Property<Guid?>("ServiceAtLocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_at_location_id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ContactOrId");

                    b.HasIndex("LocationOrId");

                    b.HasIndex("OrganizationOrId");

                    b.HasIndex("ServiceAtLocationOrId");

                    b.HasIndex("ServiceOrId");

                    b.ToTable("Phone", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "phones");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Program", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AlternateName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "alternate_name");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "organization_id");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("OrganizationOrId");

                    b.ToTable("Program", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "programs");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.RequiredDocument", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Document")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "document");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<string>("Uri")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "uri");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ServiceOrId");

                    b.ToTable("RequiredDocument", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "required_documents");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttendingType")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "attending_type");

                    b.Property<string>("Byday")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "byday");

                    b.Property<string>("Bymonthday")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "bymonthday");

                    b.Property<string>("Byweekno")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "byweekno");

                    b.Property<string>("Byyearday")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "byyearday");

                    b.Property<TimeSpan?>("ClosesAt")
                        .HasColumnType("time")
                        .HasAnnotation("Relational:JsonPropertyName", "closes_at");

                    b.Property<short?>("Count")
                        .HasColumnType("smallint")
                        .HasAnnotation("Relational:JsonPropertyName", "count");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<DateTime?>("Dtstart")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "dtstart");

                    b.Property<string>("Freq")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "freq");

                    b.Property<short?>("Interval")
                        .HasColumnType("smallint")
                        .HasAnnotation("Relational:JsonPropertyName", "interval");

                    b.Property<Guid?>("LocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "location_id");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "notes");

                    b.Property<TimeSpan?>("OpensAt")
                        .HasColumnType("time")
                        .HasAnnotation("Relational:JsonPropertyName", "opens_at");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("ScheduleLink")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "schedule_link");

                    b.Property<Guid?>("ServiceAtLocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_at_location_id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<byte?>("Timezone")
                        .HasColumnType("tinyint")
                        .HasAnnotation("Relational:JsonPropertyName", "timezone");

                    b.Property<DateTime?>("Until")
                        .HasMaxLength(50)
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "until");

                    b.Property<DateTime?>("ValidFrom")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "valid_from");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "valid_to");

                    b.Property<string>("Wkst")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "wkst");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("LocationOrId");

                    b.HasIndex("ServiceAtLocationOrId");

                    b.HasIndex("ServiceOrId");

                    b.ToTable("Schedule", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "schedules");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Accreditations")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "accreditations");

                    b.Property<string>("Alert")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "alert");

                    b.Property<string>("AlternateName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "alternate_name");

                    b.Property<string>("ApplicationProcess")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasAnnotation("Relational:JsonPropertyName", "application_process");

                    b.Property<DateTime?>("AssuredDate")
                        .HasColumnType("date")
                        .HasAnnotation("Relational:JsonPropertyName", "assured_date");

                    b.Property<string>("AssurerEmail")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "assurer_email");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("EligibilityDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "eligibility_description");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "email");

                    b.Property<string>("FeesDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "fees_description");

                    b.Property<string>("InterpretationServices")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasAnnotation("Relational:JsonPropertyName", "interpretation_services");

                    b.Property<DateTime?>("LastModified")
                        .HasPrecision(7)
                        .HasColumnType("datetime2(7)")
                        .HasAnnotation("Relational:JsonPropertyName", "last_modified");

                    b.Property<byte>("MaximumAge")
                        .HasColumnType("tinyint")
                        .HasAnnotation("Relational:JsonPropertyName", "maximum_age");

                    b.Property<byte>("MinimumAge")
                        .HasColumnType("tinyint")
                        .HasAnnotation("Relational:JsonPropertyName", "minimum_age");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("OrganizationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "organization_id");

                    b.Property<Guid>("ProgramOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "program_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "status");

                    b.Property<string>("Url")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "url");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("OrganizationOrId");

                    b.HasIndex("ProgramOrId");

                    b.ToTable("Service", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "service");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Extent")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "extent");

                    b.Property<string>("ExtentType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "extent_type");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.Property<string>("Uri")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "uri");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("ServiceOrId");

                    b.ToTable("ServiceArea", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "service_areas");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<Guid?>("LocationOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "location_id");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("ServiceOrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "service_id");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("LocationOrId");

                    b.HasIndex("ServiceOrId");

                    b.ToTable("ServiceAtLocation", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "service_at_locations");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Taxonomy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Uri")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "uri");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.ToTable("Taxonomy", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "taxonomy_detail");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.TaxonomyTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Language")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "language");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<Guid>("OrId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "parent_id");

                    b.Property<string>("Taxonomy")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasAnnotation("Relational:JsonPropertyName", "taxonomy");

                    b.Property<Guid?>("TaxonomyId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "taxonomy_id");

                    b.Property<string>("TermUri")
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)")
                        .HasAnnotation("Relational:JsonPropertyName", "term_uri");

                    b.Property<string>("Version")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasAnnotation("Relational:JsonPropertyName", "version");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"), false);

                    b.HasIndex("TaxonomyId");

                    b.ToTable("TaxonomyTerm", "deds");

                    b.HasAnnotation("Relational:JsonPropertyName", "taxonomy_term");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Accessibility", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", "Location")
                        .WithMany("Accessibilities")
                        .HasForeignKey("LocationOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Address", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", "Location")
                        .WithMany("Addresses")
                        .HasForeignKey("LocationOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Attribute", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Accessibility", null)
                        .WithMany("Attributes")
                        .HasForeignKey("AccessibilityId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Address", null)
                        .WithMany("Attributes")
                        .HasForeignKey("AddressId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Contact", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ContactId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.CostOption", null)
                        .WithMany("Attributes")
                        .HasForeignKey("CostOptionId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Funding", null)
                        .WithMany("Attributes")
                        .HasForeignKey("FundingId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Language", null)
                        .WithMany("Attributes")
                        .HasForeignKey("LanguageId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", null)
                        .WithMany("Attributes")
                        .HasForeignKey("LocationId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.MetaTableDescription", null)
                        .WithMany("Attributes")
                        .HasForeignKey("MetaTableDescriptionId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", null)
                        .WithMany("Attributes")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.OrganizationIdentifier", null)
                        .WithMany("Attributes")
                        .HasForeignKey("OrganizationIdentifierId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Phone", null)
                        .WithMany("Attributes")
                        .HasForeignKey("PhoneId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Program", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ProgramId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.RequiredDocument", null)
                        .WithMany("Attributes")
                        .HasForeignKey("RequiredDocumentId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Schedule", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceArea", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ServiceAreaId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ServiceAtLocationId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", null)
                        .WithMany("Attributes")
                        .HasForeignKey("ServiceId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.TaxonomyTerm", "TaxonomyTerm")
                        .WithMany()
                        .HasForeignKey("TaxonomyTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaxonomyTerm");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Contact", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", "Location")
                        .WithMany("Contacts")
                        .HasForeignKey("LocationId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "Organization")
                        .WithMany("Contacts")
                        .HasForeignKey("OrganizationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", "ServiceAtLocation")
                        .WithMany("Contacts")
                        .HasForeignKey("ServiceAtLocationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("Contacts")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Location");

                    b.Navigation("Organization");

                    b.Navigation("Service");

                    b.Navigation("ServiceAtLocation");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.CostOption", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("CostOptions")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Funding", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "Organization")
                        .WithMany("Funding")
                        .HasForeignKey("OrganizationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("Funding")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Organization");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Language", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", "Location")
                        .WithMany("Languages")
                        .HasForeignKey("LocationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Phone", "Phone")
                        .WithMany("Languages")
                        .HasForeignKey("PhoneOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("Languages")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Location");

                    b.Navigation("Phone");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "Organization")
                        .WithMany("Locations")
                        .HasForeignKey("OrganizationOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Metadata", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Accessibility", null)
                        .WithMany("Metadata")
                        .HasForeignKey("AccessibilityId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Address", null)
                        .WithMany("Metadata")
                        .HasForeignKey("AddressId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Attribute", null)
                        .WithMany("Metadata")
                        .HasForeignKey("AttributeId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Contact", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ContactId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.CostOption", null)
                        .WithMany("Metadata")
                        .HasForeignKey("CostOptionId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Funding", null)
                        .WithMany("Metadata")
                        .HasForeignKey("FundingId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Language", null)
                        .WithMany("Metadata")
                        .HasForeignKey("LanguageId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", null)
                        .WithMany("Metadata")
                        .HasForeignKey("LocationId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.MetaTableDescription", null)
                        .WithMany("Metadata")
                        .HasForeignKey("MetaTableDescriptionId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", null)
                        .WithMany("Metadata")
                        .HasForeignKey("OrganizationId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.OrganizationIdentifier", null)
                        .WithMany("Metadata")
                        .HasForeignKey("OrganizationIdentifierId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Phone", null)
                        .WithMany("Metadata")
                        .HasForeignKey("PhoneId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Program", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ProgramId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.RequiredDocument", null)
                        .WithMany("Metadata")
                        .HasForeignKey("RequiredDocumentId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Schedule", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ScheduleId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceArea", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ServiceAreaId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ServiceAtLocationId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", null)
                        .WithMany("Metadata")
                        .HasForeignKey("ServiceId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Taxonomy", null)
                        .WithMany("Metadata")
                        .HasForeignKey("TaxonomyId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.TaxonomyTerm", null)
                        .WithMany("Metadata")
                        .HasForeignKey("TaxonomyTermId");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "ParentOrganization")
                        .WithMany("ChildOrganizations")
                        .HasForeignKey("ParentOrganizationId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("ParentOrganization");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.OrganizationIdentifier", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "Organization")
                        .WithMany("OrganizationIdentifiers")
                        .HasForeignKey("OrganizationOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Phone", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Contact", "Contact")
                        .WithMany("Phones")
                        .HasForeignKey("ContactOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", "Location")
                        .WithMany("Phones")
                        .HasForeignKey("LocationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "Organization")
                        .WithMany("Phones")
                        .HasForeignKey("OrganizationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", "ServiceAtLocation")
                        .WithMany("Phones")
                        .HasForeignKey("ServiceAtLocationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("Phones")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Contact");

                    b.Navigation("Location");

                    b.Navigation("Organization");

                    b.Navigation("Service");

                    b.Navigation("ServiceAtLocation");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Program", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "Organization")
                        .WithMany("Programs")
                        .HasForeignKey("OrganizationOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.RequiredDocument", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("RequiredDocuments")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Schedule", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", "Location")
                        .WithMany("Schedules")
                        .HasForeignKey("LocationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", "ServiceAtLocation")
                        .WithMany("Schedules")
                        .HasForeignKey("ServiceAtLocationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("Schedules")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Location");

                    b.Navigation("Service");

                    b.Navigation("ServiceAtLocation");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", "Organization")
                        .WithMany("Services")
                        .HasForeignKey("OrganizationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Program", "Program")
                        .WithMany("Services")
                        .HasForeignKey("ProgramOrId")
                        .HasPrincipalKey("OrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Program");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceArea", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("ServiceAreas")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", "Location")
                        .WithMany("ServiceAtLocations")
                        .HasForeignKey("LocationOrId")
                        .HasPrincipalKey("OrId");

                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", "Service")
                        .WithMany("ServiceAtLocations")
                        .HasForeignKey("ServiceOrId")
                        .HasPrincipalKey("OrId");

                    b.Navigation("Location");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.TaxonomyTerm", b =>
                {
                    b.HasOne("FamilyHubs.OpenReferral.Function.Repository.Entities.Taxonomy", "TaxonomyDetail")
                        .WithMany()
                        .HasForeignKey("TaxonomyId");

                    b.Navigation("TaxonomyDetail");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Accessibility", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Address", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Attribute", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Contact", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");

                    b.Navigation("Phones");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.CostOption", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Funding", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Language", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Location", b =>
                {
                    b.Navigation("Accessibilities");

                    b.Navigation("Addresses");

                    b.Navigation("Attributes");

                    b.Navigation("Contacts");

                    b.Navigation("Languages");

                    b.Navigation("Metadata");

                    b.Navigation("Phones");

                    b.Navigation("Schedules");

                    b.Navigation("ServiceAtLocations");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.MetaTableDescription", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Organization", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("ChildOrganizations");

                    b.Navigation("Contacts");

                    b.Navigation("Funding");

                    b.Navigation("Locations");

                    b.Navigation("Metadata");

                    b.Navigation("OrganizationIdentifiers");

                    b.Navigation("Phones");

                    b.Navigation("Programs");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.OrganizationIdentifier", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Phone", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Languages");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Program", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.RequiredDocument", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Schedule", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Service", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Contacts");

                    b.Navigation("CostOptions");

                    b.Navigation("Funding");

                    b.Navigation("Languages");

                    b.Navigation("Metadata");

                    b.Navigation("Phones");

                    b.Navigation("RequiredDocuments");

                    b.Navigation("Schedules");

                    b.Navigation("ServiceAreas");

                    b.Navigation("ServiceAtLocations");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceArea", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.ServiceAtLocation", b =>
                {
                    b.Navigation("Attributes");

                    b.Navigation("Contacts");

                    b.Navigation("Metadata");

                    b.Navigation("Phones");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.Taxonomy", b =>
                {
                    b.Navigation("Metadata");
                });

            modelBuilder.Entity("FamilyHubs.OpenReferral.Function.Repository.Entities.TaxonomyTerm", b =>
                {
                    b.Navigation("Metadata");
                });
#pragma warning restore 612, 618
        }
    }
}
